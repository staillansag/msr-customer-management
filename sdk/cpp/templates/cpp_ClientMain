/*
 * This class has been automatically generated by the webMethods Developer(TM).
 *
 */

#include "WmGlobal.h"
#include <cstdlib>
#include <fstream>

JNIEnv *env = NULL;

using std::cout;
using std::cin;
using std::endl;
using std::cerr;

%ifvar inputRec%
%loop records%

    WmIData %value name%_getInputs()
         throw (WmException);
%endloop%%endif%
	 
    WmString getString(char* name)
         throw (WmException)
    {
         WmString string = NULL;
	 char* tmp = new char[128];
         if(name != NULL){
           cout << name << " =";
	 }
	 try {
	     cin.getline(tmp, 128);
	     string = new _WmString(env, tmp);
	 } catch (WmException &e){
	     cerr << "Error in getString!!" << endl;
	     throw e;
	 }
	 delete tmp;
	 return string;
    }

    WmStringArray getStringArray(char* name, int cols = -1)
         throw (WmException)
    {
         int size = 0;
	 char *tmp = new char[4];
	 int output = 1;
	 if(name == NULL) output = 0;
	 else{
	   char *tmp = new char[strlen(name) + 5];
	   if(cols == -1){
	     cout << name <<  ": how large? ";
	     cin.getline(tmp, 4);
	     size = atoi(tmp);
	   } else{
	       size = cols;
	   }
         }
	 if(cols != -1) size = cols;
         WmStringArray strArray = new _WmStringArray(env, size);


	 for(int i = 0; i < size; i++){
	   if(output){
	     cout << name << "[" << i << "] = ";
	   } else{
	       cout << "[" << i << "] = ";
	   }
	   strArray->setElement(i , getString(NULL));
	 }

	 return strArray;
    }

    WmStringTable getStringTable(char* name)
         throw (WmException)
    {
         int rows = 0, cols = 0, temp = 0;
	 char* numstr = new char[4];
	 char* tmp = new char[strlen(name) + 12];
	 cout << name << ": how many rows? ";
	 cin.getline(numstr, 4);
	 rows = atoi(numstr);

	 cout << name << ": how many cols? ";
	 cin.getline(numstr, 4);
	 cols = atoi(numstr);


	 WmStringTable strTable = new _WmStringTable(env, rows, cols);

	 for(int i = 0; i < rows; i++){
	     cout << name << "[" << i << "]";
	     strTable->setRow(i, getStringArray(NULL, cols));
	 }

	 return strTable;
    }



    %ifvar inputRec%

%loop records%

    WmIData %value name%_getInputs()
         throw (WmException)
    {
         WmIData out = WmIDataFactory::create();
         WmIDataCursor idc = out->getCursor();
%loop fields%%switch fieldType%
%case str     %         idc->insertAfter("%value name%", getString("%value name%"));
%case strarray%         idc->insertAfter("%value name%", getStringArray("%value name%"));
%case strtable%         idc->insertAfter("%value name%", getStringTable("%value name%"));
%case rec     %         idc->insertAfter("%value name%", %value ../name%_%value name%_getInputs());
%case recarray%         idc->insertAfter("%value name%", %value ../name%_%value name%_getInputs());
%endswitch%%endloop fields%
	 return out;
    }
%endloop records%%endif%



%ifvar inputRec%
    // *** Collect Inputs *** //
    WmIData getInputs()
       throw (WmException)
    {
       return %value inputRecName%_getInputs();
    }
    %endif%
    
    %ifvar outputRec%WmIData%else%void%endif% invoke(
        WmContext context%ifvar inputRec%, WmIData inputRecord%endif%)
        throw (WmException)
    {
         WmIData out = NULL;
	 try{
             %ifvar outputRec%WmIData out = %endif%context->invoke("%value literalIfcName%", "%value svcName%", %ifvar inputRec%inputRecord%else%NULL%endif%);
	     %ifvar outputRec%
	     return out;%endif%
	 
	 } catch (WmException &ex){
	     throw ex;
	 }
	 
         %ifvar outputRec%
	 if(out == NULL) out = WmIDataFactory::create();
         return out;%else%return;%endif%
         
    }

    
int main(int argc, char** argv)
{

	// Connect to server - edit for alternate server
	char*  server = "%value serverHost%:%value serverPort%";
	char*  classpath = getenv("CLASSPATH");  // get classpath for jvm

	env = WmGlobal::initClientJVM( classpath );

	WmContext context = new _WmContext(env);
       
	// To use SSL:
	//
	// context->setSecure(1);

	// Optionally send authentication certificates 
	// 
	// char*  cert    = "c:\\myCerts\\cert.der";
	// char*  privKey = "c:\\myCerts\\privkey.der";
	// char*  cacert  = "c:\\myCerts\\cacert.der";
	// context->setSSLCertificates(cert, privKey, cacert);

	// Set username and password for protected services
	char* username = "";
	char* password = "";

	try {
		context->connect(server, username, password);
	} catch (WmException e) {
		cerr << "\n\tCannot connect to server \"" << server << "\"" << endl; 
		return 0;
	}

	%ifvar inputRec%// Collect inputs (top-level only)        
	WmIData inputRecord = getInputs();

	%endif%

		try
		{
			// *** Invoke the Service and Disconnect ***
			%ifvar outputRec%WmIData outputRecord = invoke(context%ifvar inputRec%, inputRecord%endif%);
			%else%invoke(context%ifvar inputRec%, inputRecord%endif%);
			%endif%context->disconnect();
			cerr << "\n********* Successful invoke **********\n";

			// *** Access the Results ***
			cerr << "\n************* Inputs *****************\n";
			%ifvar inputRec%WmUtil::printRec(inputRecord, "%value inputRecName%");
			%else%cerr << "This Service has no inputs.\n";%endif%

				cerr << "\n************* Outputs *****************\n";
			%ifvar outputRec%WmUtil::printRec(outputRecord, "%value outputRecName%");
			%else%cerr << "This Service has no outputs.\n";%endif%

		} catch (WmException &e) {
			cerr << e.getExceptionType() << ": " << e.getMessage();
			cerr << endl;
			throw e;
		}
		
		return 0;
}


