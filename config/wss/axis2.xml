<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one
  ~ or more contributor license agreements. See the NOTICE file
  ~ distributed with this work for additional information
  ~ regarding copyright ownership. The ASF licenses this file
  ~ to you under the Apache License, Version 2.0 (the
  ~ "License"); you may not use this file except in compliance
  ~ with the License. You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied. See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->

<axisconfig name="AxisJava2.0">
	<!-- ================================================= -->
	<!-- Parameters -->
	<!-- ================================================= -->
	<parameter name="hotdeployment">false</parameter>
	<parameter name="hotupdate">false</parameter>
	<parameter name="enableMTOM">false</parameter>
	<parameter name="enableSwA">false</parameter>
	<parameter name="enableSoapValidation">true</parameter>

	<!--When Axis2 processes an RPC style WSDL definition, it would automatically create a wrapper element and type definition for each-->
	<!--message (because in an RPC style WSDL the message is defined as a set of message parts and not by a single XSD type). -->
	<!--Afterwards Axis2 will internally process any request/response as if they were actually document style with an element declaration -->
	<!--for each message. While Axis2 creates the web service instance however it would automatically add the auto generated types to the-->
	<!--XSD schema in the original WSDL definition which could be problematic in case the client wants to use and serve the original WSDL document.-->
	<!--In order to cope with that problem, one could set this parameter explicitly to false, which will cause Axis2 to create a copy-->
	<!--of the WSDL definition when processing the message types, and not modify the original.-->
	<parameter name="includeWrappedTypesDeclaration">false</parameter>

	<!--Uncomment if you want to enable file caching for attachments -->
	<!--parameter name="cacheAttachments">true</parameter>
	<parameter name="attachmentDIR"></parameter>
	<parameter name="sizeThreshold">4000</parameter-->

	<!--Uncomment if you want to plugin your own attachments lifecycle implementation -->
	<!--<attachmentsLifecycleManager class="org.apache.axiom.attachments.lifecycle.impl.LifecycleManagerImpl"/>-->


	<!--Uncomment if you want to enable the reduction of the in-memory cache of WSDL definitions -->
	<!--In some server environments, the available memory heap is limited and can fill up under load -->
	<!--Since in-memory copies of WSDL definitions can be large, some steps can be taken-->
	<!--to reduce the memory needed for the cached WSDL definitions. -->
	<!--parameter name="reduceWSDLMemoryCache">true</parameter-->

<!--This will give out the timout of the configuration contexts, in milliseconds-->
	<parameter name="ConfigContextTimeoutInterval">30000</parameter>

	<!--During a fault, stack trace can be sent with the fault message. The following flag will control -->
	<!--that behavior.-->
	<parameter name="sendStacktraceDetailsWithFaults">false</parameter>

	<!--If there aren't any information available to find out the fault reason, we set the message of the exception-->
	<!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
	<!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
	<!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
	<parameter name="DrillDownToRootCauseForFaultReason">false</parameter>

	<parameter name="userName">admin</parameter>
	<parameter name="password"><wss:hash xmlns:wss="http://wsstack.softwareag.com" wss:type="SHA-1">FEj2GRh024/2WaQ0THIkeeDuLWQ=</wss:hash></parameter>

	<!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->
	<!--ServicesDirectory only works on the following cases-->
	<!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->
	<!---When creating URL Based configurator with URL file:// -->
	<!--- War based configurator with expanded case , -->

	<!--All the other scenarios it will be ignored.-->
	<!--<parameter name="ServicesDirectory">service</parameter>-->
	<!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->
	<!--<parameter name="ModulesDirectory">modules</parameter>-->



	<!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
	<!--root which can configured using the following contextRoot parameter-->
	<parameter name="contextRoot">/</parameter>

	<!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->
	<!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->
	<!--context path to proper Axis2 servlets-->
	<parameter name="servicePath">ws</parameter>
	<!--<parameter name="restPath">rest</parameter>-->

	<!-- Following parameter will completely disable REST handling in Axis2-->
	<parameter name="disableREST" locked="true">false</parameter>

	<!-- Following parameter will suppress generation of SOAP 1.2 bindings in auto-generated WSDL files -->
	<parameter name="disableSOAP12" locked="true">false</parameter>

	<!-- Following parameters will identify the transport and message authentication JAAS contexts to the MultiLoginPolicyValidatorCallback -->
	<parameter name="sin.jaas.transport.login.context" locked="true">WSS_Transport_IS</parameter>
	<parameter name="sin.jaas.msg.login.context" locked="true">WSS_Message_IS</parameter>

	<!--POJO deployer , this will alow users to drop .class file and make that into a service-->
	<deployer extension=".class" directory="pojo" class="org.apache.axis2.deployment.POJODeployer"/>
	<deployer extension=".jar" directory="servicejars" class="org.apache.axis2.jaxws.framework.JAXWSDeployer"/>

	<!--<deployer extension=".jsa" directory="rmiservices" class="org.apache.axis2.rmi.deploy.RMIServiceDeployer"/>-->


	<!-- Following parameter will set the host name for the epr-->
	<!--<parameter name="hostname" locked="true">myhost.com</parameter>-->

	<!-- If you have a front end host which exposes this webservice using a different public URL  -->
	<!-- use this parameter to override autodetected url -->
	<!--<parameter name="httpFrontendHostUrl">https://someotherhost/context</parameter>-->


	<!--    The way of adding listener to the system-->
	<!--    <listener class="org.apache.axis2.ObserverIMPL">-->
		<!--        <parameter name="RSS_URL">http://127.0.0.1/rss</parameter>-->
		<!--    </listener>-->


	<!-- Listener for engaging Addressing module on Sandesha operations -->
	<!-- This listener will not be required once the WSSTACK-1343 is fixed on axis side -->
	<listener class="com.wm.app.b2b.server.wss.rm.SandeshaModuleListener"/>
	<!-- This listener will not be required once the WSSTACK-1343 is fixed on axis side -->

	<threadContextMigrators>
		<threadContextMigrator listId="JAXWS-ThreadContextMigrator-List" class="org.apache.axis2.jaxws.addressing.migrator.EndpointContextMapMigrator"/>
	</threadContextMigrators>

	<!-- ================================================= -->
	<!-- Message Receivers -->
	<!-- ================================================= -->
	<!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->
	<!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->
	<!--any operation -->
	<!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->
	<messageReceivers>
		<messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
			class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
		<messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
			class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
		<messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-only"
			class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
		<messageReceiver mep="http://www.w3.org/2006/01/wsdl/in-out"
			class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
	</messageReceivers>

	<!-- ================================================= -->
	<!-- Message Formatter -->
	<!-- ================================================= -->
	<!--Following content type to message formatter mapping can be used to implement support for different message -->
	<!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
	<messageFormatters>
		<messageFormatter contentType="application/x-www-form-urlencoded"
			class="org.apache.axis2.transport.http.XFormURLEncodedFormatter"/>
		<messageFormatter contentType="multipart/form-data"
			class="org.apache.axis2.transport.http.MultipartFormDataFormatter"/>
		<messageFormatter contentType="application/xml"
			class="com.softwareag.formatters.RawXMLApplicationXMLFormatter"/>
		<messageFormatter contentType="text/xml"
			class="com.softwareag.formatters.RawXMLFormatter"/>
		<messageFormatter contentType="application/soap+xml"
			class="com.softwareag.formatters.RawXMLFormatter"/>
		<messageFormatter contentType="application/json"
			class="com.softwareag.wsstack.json.JsonFormatter"/>
		<messageFormatter contentType="application/json/badgerfish"
			class="com.softwareag.wsstack.json.JsonBadgerfishFormatter"/>                         

	</messageFormatters>

	<!-- ================================================= -->
	<!-- Message Builders -->
	<!-- ================================================= -->
	<!--Following content type to builder mapping can be used to implement support for different message -->
	<!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->
	<messageBuilders>
		<messageBuilder contentType="application/xml"
			class="org.apache.axis2.builder.ApplicationXMLBuilder"/>
		<messageBuilder contentType="application/x-www-form-urlencoded"
			class="org.apache.axis2.builder.XFormURLEncodedBuilder"/>
		<messageBuilder contentType="multipart/form-data"
			class="org.apache.axis2.builder.MultipartFormDataBuilder"/>
		<messageBuilder contentType="application/json"
			class="com.softwareag.wsstack.json.JsonBuilder"/>
		<messageBuilder contentType="application/json/badgerfish"
			class="com.softwareag.wsstack.json.JsonBadgerfishBuilder"/>
		<messageBuilder contentType="application/soap+xml"
			class="com.softwareag.builders.RawXMLMessageBuilder"/>
		<messageBuilder contentType="text/xml"
			class="com.softwareag.builders.RawXMLMessageBuilder"/>
	</messageBuilders>

	<!-- ================================================= -->
	<!-- Transport Ins -->
	<!-- ================================================= -->
	<transportReceiver name="http"
		class="com.wm.app.b2b.server.wss.HTTPTransportListener">
	</transportReceiver>
	<transportReceiver name="https"
		class="com.wm.app.b2b.server.wss.HTTPSTransportListener">
	</transportReceiver>

	<!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment (e.g. ActiveMQ)
	<transportReceiver name="jms" class="org.apache.axis2.transport.jms.JMSListener">
		<parameter name="myTopicConnectionFactory">
			<parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
			<parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
			<parameter name="transport.jms.ConnectionFactoryJNDIName">TopicConnectionFactory</parameter>
		</parameter>

		<parameter name="myQueueConnectionFactory">
			<parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
			<parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
			<parameter name="transport.jms.ConnectionFactoryJNDIName">QueueConnectionFactory</parameter>
		</parameter>

		<parameter name="default">
			<parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
			<parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
			<parameter name="transport.jms.ConnectionFactoryJNDIName">QueueConnectionFactory</parameter>
		</parameter>
	</transportReceiver>-->

	<transportReceiver name="jms" 
		class="com.wm.app.b2b.server.wss.JMSTransportListener">    
	</transportReceiver>

	<!-- ================================================= -->
	<!-- Non-blocking http/s Transport Listener  -->

	<!-- the non blocking http transport based on HttpCore + NIO extensions
	<transportReceiver name="http" class="org.apache.axis2.transport.nhttp.HttpCoreNIOListener">
		<parameter name="port" locked="false">9000</parameter>
		<parameter name="non-blocking" locked="false">true</parameter>
	</transportReceiver>-->

	<!-- the non blocking https transport based on HttpCore + SSL-NIO extensions
	<transportReceiver name="https" class="org.apache.axis2.transport.nhttp.HttpCoreNIOSSLListener">
		<parameter name="port" locked="false">9002</parameter>
		<parameter name="non-blocking" locked="false">true</parameter>
		<parameter name="keystore" locked="false">
			<KeyStore>
				<Location>identity.jks</Location>
				<Type>JKS</Type>
				<Password>password</Password>
				<KeyPassword>password</KeyPassword>
			</KeyStore>
		</parameter>
		<parameter name="truststore" locked="false">
			<TrustStore>
				<Location>trust.jks</Location>
				<Type>JKS</Type>
				<Password>password</Password>
			</TrustStore>
		</parameter>-->
		<!--<parameter name="SSLVerifyClient">require</parameter>
			supports optional|require or defaults to none -->
	<!--</transportReceiver>-->

<!-- ================================================= -->
	<!-- Mail Transport Listener  -->
	<!-- This is a sample configuration. It assumes a mail server running in localhost.
		 Listener pops  messages that comes to the email address red@localhost. Users
		 password is red. Listener connect to the server every 3000 milliseconds.
		 Parameters with "transport." prefix is Axis2 specific. Others are all from Java Mail API. 
		 http://people.apache.org/~pzf/SMTPBase64Binding-0.2.html
	 -->
	<!-- ================================================= -->
	<!--<transportReceiver name="mailto" class="org.apache.axis2.transport.mail.SimpleMailListener">
		<parameter name="mail.pop3.host">localhost</parameter>
		<parameter name="mail.pop3.user">red</parameter>
		<parameter name="mail.store.protocol">pop3</parameter>
		<parameter name="transport.mail.pop3.password">red</parameter>
		<parameter name="transport.mail.replyToAddress">red@localhost</parameter>
		<parameter name="transport.listener.interval">3000</parameter>
	</transportReceiver>-->

	<!--Uncomment if you want to have TCP transport support-->
	<!--transportReceiver name="tcp"
					   class="org.apache.axis2.transport.tcp.TCPServer">
		<parameter name="port">6060</parameter-->>
		<!--If you want to give your own host address for EPR generation-->
		<!--uncomment the following paramter , and set it as you required.-->
		<!--<parameter name="hostname">tcp://myApp.com/ws</parameter>-->
		<!-- /transportReceiver -->

		<!-- ================================================= -->
		<!-- Transport Outs -->
		<!-- ================================================= -->

		<transportSender name="tcp"
			class="org.apache.axis2.transport.tcp.TCPTransportSender"/>
		<transportSender name="local"
			class="org.apache.axis2.transport.local.LocalTransportSender"/>
		<transportSender name="http"
			class="com.wm.app.b2b.server.wss.HTTPTransportSender"/>
		<transportSender name="https"
			class="com.wm.app.b2b.server.wss.HTTPTransportSender"/>

		<!-- Please enable this if you need the java transport -->
		<!-- <transportSender name="java"
					 class="org.apache.axis2.transport.java.JavaTransportSender"/> -->

	<!--<transportSender name="jms"-->
		<!--class="org.apache.axis2.transport.jms.JMSSender"/>-->

	<transportSender name="jms"
		class="com.wm.app.b2b.server.wss.JMSTransportSender"/>

	<!-- ================================================= -->
	<!-- Non-blocking http/s Transport Sender  -->

	<!-- the non-blocking http transport sender based on HttpCore + NIO extensions
	<transportSender name="http"  class="org.apache.axis2.transport.nhttp.HttpCoreNIOSender">
		<parameter name="non-blocking" locked="false">true</parameter>
	</transportSender>-->

	<!-- the non-blocking https transport sender based on HttpCore + NIO SSL extensions
	<transportSender name="https" class="org.apache.axis2.transport.nhttp.HttpCoreNIOSSLSender">
		<parameter name="non-blocking" locked="false">true</parameter>
		<parameter name="keystore" locked="false">
			<KeyStore>
				<Location>identity.jks</Location>
				<Type>JKS</Type>
				<Password>password</Password>
				<KeyPassword>password</KeyPassword>
			</KeyStore>
		</parameter>
		<parameter name="truststore" locked="false">
			<TrustStore>
				<Location>trust.jks</Location>
				<Type>JKS</Type>
				<Password>password</Password>
			</TrustStore>
		</parameter>-->
		<!--<parameter name="HostnameVerifier">DefaultAndLocalhost</parameter>
			supports Strict|AllowAll|DefaultAndLocalhost or the default if none specified -->
	<!--</transportSender>-->

<!-- ================================================= -->
	<!-- Mail Transport Sender  -->
	<!--Only need to uncomment the sender. Configuration is achieved with every client.
		At any instant mail host should be given. Sample configuration has been given.
		http://people.apache.org/~pzf/SMTPBase64Binding-0.2.html
   -->
	<!-- ================================================= -->
	<!--<transportSender name="mailto" class="org.apache.axis2.transport.mail.MailTransportSender">
		<parameter name="mail.smtp.host">localhost</parameter>
	</transportSender>-->

	<!-- ================================================= -->
	<!-- Global Modules  -->
	<!-- ================================================= -->
	<!-- Comment this to disable Addressing -->
	<!--module ref="addressing"/-->
	<!--module ref="rampart"/-->
	<!--module ref="rahas"/-->

	<!--Configuring module , providing parameters for modules whether they refer or not-->
	<!--<moduleConfig name="addressing">-->
		<!--<parameter name="addressingPara">N/A</parameter>-->
		<!--</moduleConfig>-->

	<!-- ================================================= -->
	<!-- Clustering  -->
	<!-- ================================================= -->
	<!-- Configure and uncomment following for preparing Axis2 to a clustered environment -->
	<!--
	<cluster class="org.apache.axis2.cluster.tribes.TribesClusterManager">
		<parameter name="param1">value1</parameter>
		<parameter name="domain">apache.axis2.domain</parameter>
		<parameter name="synchronizeAll">true</parameter>
		<parameter name="maxRetries">10</parameter>
		<configurationManager class="org.apache.axis2.cluster.configuration.TribesConfigurationManager">
			<listener class="org.apache.axis2.cluster.configuration.DefaultConfigurationManagerListener"/>
		</configurationManager>
		<contextManager class="org.apache.axis2.cluster.context.TribesContextManager">
			<listener class="org.apache.axis2.cluster.context.DefaultContextManagerListener"/>
		</contextManager>
	</cluster>
	-->

	<!-- ================================================= -->
	<!-- Phases  -->
	<!-- ================================================= -->
	<phaseOrder type="InFlow">
		<!--  System predefined phases       -->
		<phase name="Transport">
			<handler name="WmRequestURIBasedDispatcher"
				class="com.wm.app.b2b.server.wss.WMUriBasedDispatcher">
				<order phase="Transport"/>
			</handler>
			<handler name="RequestURIBasedDispatcher"
				class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
				<order phase="Transport"/>
			</handler>
			<handler name="SOAPActionBasedDispatcher"
				class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
				<order phase="Transport"/>
			</handler>
		</phase>
		<phase name="Addressing">
			<handler name="AddressingBasedDispatcher"
				class="com.wm.app.b2b.server.wss.WMAddressingBasedDispatcher">
				<order phase="Addressing"/>
			</handler>
		</phase>
		<phase name="PreSecurity">
			<handler name="WSStackRampartConfigurationLoader" 
				class="com.wm.app.b2b.server.wss.security.ISRampartConfigLoader">
				<order phaseFirst="true" />
			</handler>
		</phase>
		<phase name="Security"/>
		<phase name="AS4PostSecurity"/>
		<phase name="PreDispatch"/>
		<phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
			<parameter name="validateEndpointForTransports">http,tcp,mail,jms</parameter>

			<handler name="WmRequestURIBasedDispatcher"
				class="com.wm.app.b2b.server.wss.WMUriBasedDispatcher">
				<order phase="Dispatch"/>
			</handler>
			<handler name="RequestURIBasedDispatcher"
				class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
			<handler name="SOAPActionBasedDispatcher"
				class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
			<handler name="RequestURIOperationDispatcher"
				class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
			<handler name="SOAPMessageBodyBasedDispatcher"
				class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>

			<handler name="HTTPLocationBasedDispatcher"
				class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
			<handler name="GenericProviderDispatcher"
				class="org.apache.axis2.jaxws.dispatchers.GenericProviderDispatcher"/>
			<handler name="MustUnderstandValidationDispatcher"
				class="org.apache.axis2.jaxws.dispatchers.MustUnderstandValidationDispatcher"/>
		</phase>
		<!--  System predefined phases       -->
		<!--   After Postdispatch phase module author or service author can add any phase he want      -->

		<phase name="Authorization"/>
		<phase name="ServiceHandler">
			<handler name="RequiredHeadersChecker"
				class="com.wm.app.b2b.server.wss.handler.RequiredHeadersChecker">
				<order phaseFirst="true" />
			</handler>
		</phase>
		<phase name="AS4Phase"/>

		<phase name="OperationInPhase">
			<handler name="MustUnderstandChecker"
				class="org.apache.axis2.jaxws.dispatchers.MustUnderstandChecker">
				<order phase="OperationInPhase"/>
			</handler>
		</phase>
		<phase name="soapmonitorPhase"/>
		<phase name="RMPhase"/>
	</phaseOrder>
	<phaseOrder type="OutFlow">
		<!--      user can add his own phases to this area  -->
		<phase name="PopulateResponseContext">
			<handler name="PopulateResponseContextHandler" 
				class="com.wm.app.b2b.server.wss.PopulateResponseContextHandler">
				<order phaseFirst="true" />
			</handler>
		</phase>

		<phase name="RMPhase"/>
		<phase name="soapmonitorPhase"/>
		<phase name="OperationOutPhase"/>
		<phase name="Authorization"/>
		<phase name="ServiceHandler"/>        
		<phase name="AS4Phase"/>
		<!--system predefined phase-->
		<!--these phase will run irrespective of the service-->
		<phase name="PolicyDetermination"/>
		<phase name="MessageOut"/>
		<phase name="OutboundCallbackPhase">
			 <handler name="OutboundCallbackServiceHandler" 
                     class="com.wm.app.b2b.server.wss.OutboundCallbackServiceHandler">
            </handler>
		</phase>
		<phase name="PreSecurity">
			<handler name="WSStackRampartConfigurationLoader" 
				class="com.wm.app.b2b.server.wss.security.ISRampartConfigLoader">
				<order phaseFirst="true" />
			</handler>
		</phase>
		<phase name="Security"/>
		<phase name="AS4PostSecurity"/>
	</phaseOrder>
	<phaseOrder type="InFaultFlow">
		<!--  System predefined phases       -->
		<phase name="Transport">
			<handler name="WmRequestURIBasedDispatcher"
				class="com.wm.app.b2b.server.wss.WMUriBasedDispatcher">
				<order phase="Transport"/>
			</handler>
			<handler name="RequestURIBasedDispatcher"
				class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
				<order phase="Transport"/>
			</handler>
			<handler name="SOAPActionBasedDispatcher"
				class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
				<order phase="Transport"/>
			</handler>
		</phase>
		<phase name="Addressing">
			<handler name="AddressingBasedDispatcher"
				class="com.wm.app.b2b.server.wss.WMAddressingBasedDispatcher">
				<order phase="Addressing"/>
			</handler>
		</phase>
		<phase name="PreSecurity">
			<handler name="WSStackRampartConfigurationLoader" 
				class="com.wm.app.b2b.server.wss.security.ISRampartConfigLoader">
				<order phaseFirst="true" />
			</handler>
		</phase>
		<phase name="Security"/>
		<phase name="AS4PostSecurity"/>
		<phase name="PreDispatch"/>
		<phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
			<parameter name="validateEndpointForTransports">http,tcp,mail,jms</parameter>

			<handler name="WmRequestURIBasedDispatcher"
				class="com.wm.app.b2b.server.wss.WMUriBasedDispatcher">
				<order phase="Dispatch"/>
			</handler>
			<handler name="RequestURIBasedDispatcher"
				class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
			<handler name="SOAPActionBasedDispatcher"
				class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
			<handler name="RequestURIOperationDispatcher"
				class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
			<handler name="SOAPMessageBodyBasedDispatcher"
				class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>

			<handler name="HTTPLocationBasedDispatcher"
				class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
			<handler name="GenericProviderDispatcher"
				class="org.apache.axis2.jaxws.dispatchers.GenericProviderDispatcher"/>
			<handler name="MustUnderstandValidationDispatcher"
				class="org.apache.axis2.jaxws.dispatchers.MustUnderstandValidationDispatcher"/>
		</phase>
		<!--  System predefined phases       -->
		<!--   After Postdispatch phase module author or service author can add any phase he want      -->

		<phase name="Authorization"/>
		<phase name="ServiceHandler">
			<handler name="RequiredHeadersChecker"
				class="com.wm.app.b2b.server.wss.handler.RequiredHeadersChecker">
				<order phaseFirst="true" />
			</handler>
		</phase>

		<phase name="OperationInFaultPhase">
			<handler name="MustUnderstandChecker"
				class="org.apache.axis2.jaxws.dispatchers.MustUnderstandChecker">
				<order phase="OperationInPhase"/>
			</handler>
		</phase>
		<phase name="soapmonitorPhase"/>    
		<phase name="RMPhase"/>
		<phase name="AS4Phase"/>
	</phaseOrder>
	<phaseOrder type="OutFaultFlow">
		<!--      user can add his own phases to this area  -->
		<phase name="PopulateResponseContext">
			<handler name="PopulateResponseContextHandler" 
				class="com.wm.app.b2b.server.wss.PopulateResponseContextHandler">
				<order phaseFirst="true" />
			</handler>
		</phase>

		<phase name="RMPhase"/>
		<phase name="soapmonitorPhase"/>
		<phase name="OperationOutFaultPhase"/>
		<phase name="ServiceHandler"/>
		<phase name="AS4Phase"/>
		<phase name="PolicyDetermination"/>
		<phase name="MessageOut">
			<!-- Adding the PopulateResponseContextHandler twice since the phases above the MessageOut are 'OperationPhase' which will be
				 invoked only when operation is resolved. For the cases where fault is being returned before operation is resolved, 
				 this handler will populate the fault context. -->
			<handler name="PopulateResponseContextHandler" 
				class="com.wm.app.b2b.server.wss.PopulateResponseContextHandler">
				<order phaseFirst="true" />
			</handler>
		</phase>
		<phase name="OutboundCallbackPhase">
			 <handler name="OutboundCallbackServiceHandler" 
                     class="com.wm.app.b2b.server.wss.OutboundCallbackServiceHandler">
            </handler>
		</phase>
		<phase name="PreSecurity">
			<handler name="WSStackRampartConfigurationLoader" 
				class="com.wm.app.b2b.server.wss.security.ISRampartConfigLoader">
				<order phaseFirst="true" />
			</handler>
		</phase>
		<phase name="Security"/>
		<phase name="AS4PostSecurity"/>
	</phaseOrder>
</axisconfig>
